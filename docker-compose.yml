version: '3.8'
services:
  
  graphite:
    image: graphiteapp/graphite-statsd
    container_name: graphite
    ports:
      - 80:80
      - 2003:2003
      - 2004:2004
      - 8125:8125
    networks:
      - spring
    volumes:
      - graphite:/graphite/storage
  
  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    networks:
      - spring
  
  user:
    image: "users"
    container_name: users
    build:
      context: ./game_shop-users
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - eureka-server
      - broker
      - config-server
      - zipkin
      - graphite
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/users
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka
    ports:
      - "8090:8090"
    networks:
      - spring
      - postgres

  orders:
    image: "orders"
    container_name: orders
    build:
      context: ./game_shop-orders
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - eureka-server
      - broker
      - config-server
      - zipkin
      - graphite
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/orders
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka
    ports:
      - "9000:9000"
    networks:
      - spring
      - postgres
  
  notifications:
    image: "notifications"
    container_name: notifications
    build:
      context: ./game_shop-notifications
      dockerfile: Dockerfile
    depends_on:
      - eureka-server
      - broker
      - config-server
      - zipkin
    environment:
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka
    ports:
      - "8085:8085"
    networks:
      - spring
  
  eureka-server:
    image: "eureka-server"
    container_name: eureka-server
    build:
      context: ./eureka-server
    ports:
      - "8761:8761"
    networks:
      - spring
    depends_on:
      - zipkin
  
  config-server:
    image: "config-server"
    container_name: config-server
    build:
      context: ./config-server
      dockerfile: Dockerfile
    depends_on:
      - eureka-server
      - zipkin
    ports:
      - "8888:8888"
    networks:
      - spring
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    depends_on:
      - eureka-server
    networks:
      - spring
  
  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - 29092:29092
    networks:
      - spring
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    restart: on-failure
  
  akhq:
    image: tchiotludo/akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "broker:29092"
    ports:
      - "1001:8080"
      - "28081:28081"
  
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - spring
  
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped
  
  pgadmin:
    container_name: pageadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped
  
networks:
  postgres:
    driver: bridge
  spring:
    driver: bridge
    
volumes:
  postgres:
  pgadmin:
  graphite: